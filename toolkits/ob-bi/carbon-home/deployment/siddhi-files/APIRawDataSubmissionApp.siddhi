/*
 * Copyright (c) 2021-2024, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 LLC. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
 * You may not alter or remove any copyright or other notice from copies of this content.
 */

@App:name("APIRawDataSubmissionApp")

@source(type='wso2event',  @map(type='wso2event'))
define stream APIInputStream(CONSENT_ID string,TPP_ID string,CLIENT_ID string,USER_AGENT string,STATUS_CODE int,
                        STATUS_MESSAGE string,HTTP_METHOD string,RESPONSE_PAYLOAD_SIZE long,REQUEST_EXQ_START_TIME long,
                        BACKEND_REQ_START_TIME long, BACKEND_REQ_END_TIME long,BACKEND_LATENCY long,ELECTED_RESOURCE string,
                        AUTHORISATION_STATUS string,API_NAME string,TIMESTAMP long,API_SPEC_VERSION string,CUSTOMER_STATUS string, ACCESS_TOKEN string);

@primaryKey('ID','ELECTED_RESOURCE')
@store(type='rdbms', datasource='OB_REPORTING_DB')
@Index('TIMESTAMP')
define table API_INVOCATION_RAW_DATA(ID string,CONSENT_ID string,TPP_ID string,CLIENT_ID string,USER_AGENT string,STATUS_CODE int,
                        STATUS_MESSAGE string,HTTP_METHOD string,RESPONSE_PAYLOAD_SIZE long,REQUEST_EXQ_START_TIME long,
                        BACKEND_REQ_START_TIME long, BACKEND_REQ_END_TIME long,BACKEND_LATENCY long,ELECTED_RESOURCE string,
                        AUTHORISATION_STATUS string,API_NAME string,TIMESTAMP long,API_SPEC_VERSION string,CUSTOMER_STATUS string);

@primaryKey('ID')
@store(type='rdbms', datasource='OB_REPORTING_DB')
define table CDS_SESSION_RAW_DATA(ID string, ACCESS_TOKEN string, SESSION_TYPE string);

@sink(type='inMemory',topic='apiInvocationRawData', @map(type='passThrough'))
define stream CDSMetricsRawStream(id string, statusCode int, respTime long, electedResource string, reqTimestamp long, customerStatus string);

from APIInputStream
select UUID() as id, STATUS_CODE as statusCode, (BACKEND_REQ_END_TIME - REQUEST_EXQ_START_TIME) as respTime, ELECTED_RESOURCE as electedResource,
REQUEST_EXQ_START_TIME as reqTimestamp, CUSTOMER_STATUS as customerStatus
insert into CDSMetricsRawStream;

from APIInputStream
select UUID() as ID,CONSENT_ID,TPP_ID,CLIENT_ID,USER_AGENT,STATUS_CODE,STATUS_MESSAGE,HTTP_METHOD,RESPONSE_PAYLOAD_SIZE,REQUEST_EXQ_START_TIME,
BACKEND_REQ_START_TIME,BACKEND_REQ_END_TIME,BACKEND_LATENCY,ELECTED_RESOURCE,AUTHORISATION_STATUS,API_NAME,TIMESTAMP,API_SPEC_VERSION,CUSTOMER_STATUS
insert into API_INVOCATION_RAW_DATA;

from APIInputStream[not(ACCESS_TOKEN is null)]
select UUID() as ID, ACCESS_TOKEN, ifThenElse(CUSTOMER_STATUS == 'customer-present', 'attended', 'unattended') as SESSION_TYPE
insert into CDS_SESSION_RAW_DATA;

-- Once a token used in customer present context, it will always be considered as a session used for attended traffic.
from APIInputStream[CUSTOMER_STATUS == 'customer-present']
update CDS_SESSION_RAW_DATA
set CDS_SESSION_RAW_DATA.SESSION_TYPE = 'attended'
on CDS_SESSION_RAW_DATA.ACCESS_TOKEN == ACCESS_TOKEN
